
import { useState, useEffect, useRef } from "react";
import { motion, AnimatePresence } from "framer-motion";

const tabs = [
  { id: "projects", title: "Projects" },
  { id: "skills", title: "Skills" },
  { id: "experience", title: "Experience" },
  { id: "certificate", title: "Certificate"},
];

const projectData = {
  1: {
    title: "Sentiment Analysis of YouTube App Reviews on Google Play Store using Machine Learning: A Comparative Study of SVM, Logistic Regression, XGBoost, and CatBoost",
    shortDescription: "Python",
    description: `Proyek ini bertujuan menganalisis sentimen ulasan pengguna aplikasi YouTube di Google Play Store menggunakan machine learning. Karena banyaknya data, digunakan pendekatan otomatis untuk mengelompokkan komentar menjadi positif, negatif, atau netral.
    
    **Algoritma yang Dibandingkan:**
    Empat algoritma dibandingkan performanya, yaitu SVM, Logistic Regression, XGBoost, dan CatBoost, untuk menentukan metode terbaik dalam klasifikasi sentimen. Hasil penelitian menunjukkan bahwa metode **XGBoost** memberikan akurasi terbaik dalam mengklasifikasikan sentimen ulasan pengguna.

    **Peran dari Proyek ini:**
    Setiap anggota memiliki peran masing-masing dalam mengerjakan proyek ini, diantaranya:

    **1. Raihan Alvian Nuryansyah (Saya):**
    - Bertanggung jawab dalam pembuatan code program untuk scraping data, preprocessing, ekstraksi fitur TF-IDF, pelatihan model machine learning, serta evaluasi hasil menggunakan Python dan Google Colab.
    - Mendesain dan menyusun poster ilmiah, termasuk pemilihan elemen visual (diagram, word cloud, grafik), layout akademik, dan struktur narasi yang informatif.

    **Acmad Sandy Wijaya:**
    - Mencari dan menganalisis berbagai referensi jurnal serta artikel ilmiah yang berkaitan dengan metode sentiment analysis.
    - Berperan dalam pengembangan ide analisis, pengolahan data, dan kontribusi dalam penulisan deskripsi metodologi.

    **Yuni Ramawati:**
    - Membantu dalam perumusan metodologi penelitian, penyusunan tujuan, serta validasi isi poster agar sesuai dengan kaidah akademik.
    - Melakukan evaluasi terhadap hasil akhir untuk memastikan kesesuaian antara hasil analisis dan visualisasi data.
    
    **Tools yang digunakan:**
    - Google Colab: untuk penulisan dan eksekusi kode Python berbasis cloud.
    - Python Libraries: nltk, sastrawi, scikit-learn, wordcloud, pandas, matplotlib, seaborn â€“ untuk scraping, preprocessing, visualisasi, dan evaluasi model.
    - Machine Learning Models: Support Vector Machine (SVM), Logistic Regression Extreme Gradient Boosting (XGBoost), Categorical Boosting (CatBoost).
    - TF-IDF Vectorizer: untuk ekstraksi fitur dari teks ulasan.
    - Google PlayStore: untuk pengambilan data ulasan pengguna YouTube.
    - Canva: untuk pembuatan dan penyusunan poster ilmiah dengan desain yang menarik dan informatif.`,
    images: [
      "/assets/projects/sentiment/img2.png",
      "/assets/projects/sentiment/poster.png",
      "/assets/projects/sentiment/img1.png",
      "/assets/projects/sentiment/img3.png",
      "/assets/projects/sentiment/img4.png",
      "/assets/projects/sentiment/img5.png",
      "/assets/projects/sentiment/img6.png",
      "/assets/projects/sentiment/img7.png"
    ]
  },
  2: {
    title: "Development of an Interactive ChatBot with GUI and Voice Using Python-Based NLP and Manually Defined Response Logic",
    shortDescription: "Python",
    description: `Proyek ini merupakan pengembangan sistem Artificial Intelligence berbasis Natural Language Processing (NLP) menggunakan bahasa Python. Proyek ini dirancang untuk menghadirkan pengalaman percakapan interaktif dalam bentuk GUI chatbot yang mendukung teks dan suara, memberikan respons dinamis secara manual, serta menyediakan reaksi seperti emoji, tombol suka/tidak suka, dan fitur salin pesan.
    
    **Tools yang digunakan:**
    - Python
    - Library Internal: difflib, datetime, threading, tkinter
    - Library Eksternal: SpeechRecognition, pyttsx3, pyperclip, Pillow
    - VSCode`,

    images: [
      "/assets/projects/chatbot-gui/chatbot1.png",
      "/assets/projects/chatbot-gui/chatbot2.png",
      "/assets/projects/chatbot-gui/chatbot3.png",
      "/assets/projects/chatbot-gui/chatbot4.png"
    ]
  },
  3: {
    title: "Decision Support System - SAW Method",
    shortDescription: "Python",
    description: `Proyek ini bertujuan untuk membangun sebuah Sistem Pendukung Keputusan (SPK) berbasis metode SAW (Simple Additive Weighting) yang dapat membantu pengguna dalam menilai dan menentukan alternatif terbaik berdasarkan kriteria dan bobot tertentu. Aplikasi ini dilengkapi dengan antarmuka grafis (GUI) menggunakan Tkinter, memungkinkan interaksi pengguna yang intuitif dan efisien.
Fitur yang dikembangkan mencakup:
1. Input data alternatif dan kriteria (benefit/cost)
2. Perhitungan nilai menggunakan metode SAW
3. Visualisasi hasil perhitungan dalam bentuk grafik
4. Analisis sensitivitas terhadap perubahan bobot kriteria
5. Ekspor hasil perhitungan ke file .csv

**Tools yang digunakan:**
- Python
- Tkinter
- Library Eksternal: Pandas, NumPy, Matplotlib, Seaborn, Datetime, os, csv`,
    images: [
      "/assets/projects/saw/saw1.png",
      "/assets/projects/saw/saw2.png",
      "/assets/projects/saw/saw3.png",
      "/assets/projects/saw/saw4.png",
      "/assets/projects/saw/saw5.png",
      "/assets/projects/saw/saw6.png",
      "/assets/projects/saw/saw7.png"
    ]
  },
  4: {
    title: "Real-Time Indonesian License Plate Detection with OpenCV and Visualization",
    shortDescription: "Python",
    description: `Proyek ini dikembangkan menggunakan Python dengan pustaka utama OpenCV untuk deteksi plat nomor kendaraan Indonesia secara real-time dan Matplotlib untuk visualisasi. Sistem memanfaatkan Haar Cascade Classifier melalui file haarcascade_indonesian_plate_number.xml untuk mengenali plat nomor dari video yang ditangkap oleh kamera/webcam. Selama 15 detik pertama, sistem mencatat jumlah deteksi per frame dan menampilkannya dalam bentuk grafik. Setelahnya, deteksi tetap berjalan hingga dihentikan. Proyek ini juga menggunakan pustaka tambahan seperti numpy dan time untuk mendukung proses.
    
    **Tools yang digunakan:**
    - Python
    - Library: OpenCV, Matplotlib, NumPy, Time
    - Classifier: haarcascade_indonesian_plate_number.xml
    - Webcam
    - VSCode`,
    images: [
      "/assets/projects/plate/plate1.png",
      "/assets/projects/plate/plate2.png"
    ]
  },
  5: {
    title: "Face, Eye, and Smile Detection using Haar Cascade in Python",
    shortDescription: "Python",
    description: `Mengembangkan sebuah proyek sederhana berbasis Python menggunakan OpenCV untuk melakukan deteksi wajah, mata, dan senyuman secara real-time melalui kamera. Proyek ini terdiri dari beberapa variasi program, seperti deteksi wajah saja, deteksi wajah dengan mata, deteksi wajah dengan senyum, hingga deteksi wajah lengkap dengan mata dan senyum. Selain itu, juga membuat visualisasi grafik untuk menunjukkan jumlah deteksi secara real-time selama 15 detik. Tujuan dari proyek ini adalah untuk memahami dan menerapkan konsep computer vision dasar dengan pemanfaatan algoritma Haar Cascade Classifier.
    
    **Tools yang digunakan:**
    - Python
    - Library: OpenCV, Numpy, Matplotlib, Time
    - Webcam
    - VSCode`,
    images: [
      "/assets/projects/face-detection/figure.png",
      "/assets/projects/face-detection/eyes_smile.png",
      "/assets/projects/face-detection/eyes.png",
      "/assets/projects/face-detection/face.png",
      "/assets/projects/face-detection/smile.png",
    ]
  },
  6: {
    title: "Klasifikasi Gambar Anjing-Kucing",
    shortDescription: "Python",
    description: "Deskripsi lengkap untuk project keenam. Aplikasi mobile-first dengan cross-platform compatibility dan real-time synchronization capabilities.",
    images: [
      "https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp",
      "https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp",
      "https://img.daisyui.com/images/stock/photo-1494253109108-2e30c049369b.webp",
      "https://img.daisyui.com/images/stock/photo-1565098772267-60af42b81ef2.webp",
      "https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp"
    ]
  },
  7: {
    title: "Web Portfolio Personal",
    shortDescription: "React.js",
    description: "Deskripsi lengkap untuk project ketujuh. Website portfolio yang menampilkan karya-karya terbaik dengan desain modern dan responsif.",
    images: [
      "https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp",
      "https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp",
      "https://img.daisyui.com/images/stock/photo-1565098772267-60af42b81ef2.webp",
      "https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp",
      "https://img.daisyui.com/images/stock/photo-1494253109108-2e30c049369b.webp"
    ]
  },
  8: {
    title: "E-Commerce Platform",
    shortDescription: "JavaScript",
    description: "Deskripsi lengkap untuk project kedelapan. Platform e-commerce lengkap dengan fitur manajemen produk, pembayaran online, dan dashboard admin.",
    images: [
      "https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp",
      "https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp",
      "https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp",
      "https://img.daisyui.com/images/stock/photo-1494253109108-2e30c049369b.webp",
      "https://img.daisyui.com/images/stock/photo-1565098772267-60af42b81ef2.webp"
    ]
  },
  9: {
    title: "Mobile App UI/UX Design",
    shortDescription: "Figma",
    description: "Deskripsi lengkap untuk project kesembilan. Desain antarmuka aplikasi mobile dengan fokus pada user experience dan accessibility yang optimal.",
    images: [
      "https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp",
      "https://img.daisyui.com/images/stock/photo-1565098772267-60af42b81ef2.webp",
      "https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp",
      "https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp",
      "https://img.daisyui.com/images/stock/photo-1494253109108-2e30c049369b.webp"
    ]
  },
  10: {
    title: "Data Visualization Dashboard",
    shortDescription: "Python",
    description: "Deskripsi lengkap untuk project kesepuluh. Dashboard interaktif untuk visualisasi data dengan berbagai chart dan graph yang informatif.",
    images: [
      "https://img.daisyui.com/images/stock/photo-1494253109108-2e30c049369b.webp",
      "https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp",
      "https://img.daisyui.com/images/stock/photo-1565098772267-60af42b81ef2.webp",
      "https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp",
      "https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp"
    ]
  },
  11: {
    title: "Smart Home IoT System",
    shortDescription: "C++",
    description: "Deskripsi lengkap untuk project kesebelas. Sistem IoT untuk smart home dengan kontrol otomatis perangkat elektronik dan monitoring real-time.",
    images: [
      "https://img.daisyui.com/images/stock/photo-1565098772267-60af42b81ef2.webp",
      "https://img.daisyui.com/images/stock/photo-1494253109108-2e30c049369b.webp",
      "https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp",
      "https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp",
      "https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp"
    ]
  }
};

const experienceData = {
  1: {
    title: "Entry Data",
    company: "PT. Ciptadra Softindo",
    period: "Januari 2022 - April 2022",
    description: "Mengembangkan aplikasi web menggunakan React.js dan implementasi responsive design dengan Tailwind CSS. Kolaborasi dengan tim backend untuk integrasi API dan optimasi performa aplikasi.\n\nBertanggung jawab dalam data entry dan validasi data untuk berbagai proyek client. Melakukan quality assurance untuk memastikan akurasi data yang diinput.\n\nMenggunakan tools seperti Excel, Google Sheets, dan database management systems. Bekerja dalam tim yang dinamis dengan deadline yang ketat.\n\nMengembangkan sistem tracking untuk monitoring progress pekerjaan. Melakukan backup dan maintenance data secara berkala untuk memastikan integritas informasi.",
    images: [
      "https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp",
      "https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp",
      "https://img.daisyui.com/images/stock/photo-1565098772267-60af42b81ef2.webp"
    ]
  },
  2: {
    title: "Daily Worker Shopee",
    company: "Various Clients",
    period: "September 2023 - Januari 2024",
    description: "Membuat website company profile dan e-commerce menggunakan WordPress dan custom HTML/CSS. Menangani lebih dari 10 proyek dengan tingkat kepuasan klien 100%.",
    images: [
      "https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp",
      "https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp",
      "https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp"
    ]
  },
  3: {
    title: "Koordinator Abdimas",
    company: "Jakarta Global University",
    period: "Desember 2023",
    description: "Memberikan dukungan teknis untuk sistem komputer dan jaringan. Melakukan maintenance hardware dan software, serta training penggunaan aplikasi untuk staff.",
    images: [
      "https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp",
      "https://img.daisyui.com/images/stock/photo-1565098772267-60af42b81ef2.webp",
      "https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp"
    ]
  },
  4: {
    title: "Media & Communication",
    company: "English Club",
    period: "November 2024 - Sekarang",
    description: "Membantu tim design dalam pembuatan wireframe dan prototype menggunakan Figma. Melakukan user research dan testing untuk meningkatkan user experience aplikasi mobile.",
    images: [
      "https://img.daisyui.com/images/stock/photo-1494253109108-2e30c049369b.webp",
      "https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp",
      "https://img.daisyui.com/images/stock/photo-1565098772267-60af42b81ef2.webp"
    ]
  },
  5: {
    title: "Pengembangan Sumber Daya Anggota (PSDA)",
    company: "Himpunan Mahasiswa Teknik Informatika",
    period: "November 2024 - Sekarang",
    description: "Mempelajari pengelolaan database MySQL dan PostgreSQL. Melakukan backup data, optimasi query, dan monitoring performa database untuk berbagai aplikasi client.",
    images: [
      "https://img.daisyui.com/images/stock/photo-1565098772267-60af42b81ef2.webp",
      "https://img.daisyui.com/images/stock/photo-1494253109108-2e30c049369b.webp",
      "https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp"
    ]
  },
  6: {
    title: "Liaison Officer PBAK",
    company: "Jakarta Global University",
    period: "September 2024",
    description: "Mengajar dasar-dasar pemrograman Python dan Java kepada mahasiswa tingkat awal. Membuat materi pembelajaran dan mentoring project akhir mahasiswa.",
    images: [
      "https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp",
      "https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp",
      "https://img.daisyui.com/images/stock/photo-1494253109108-2e30c049369b.webp"
    ]
  },
  7: {
    title: "Liaison Officer Wisuda",
    company: "Jakarta Global University",
    period: "Oktober 2024",
    description: "Mengajar dasar-dasar pemrograman Python dan Java kepada mahasiswa tingkat awal. Membuat materi pembelajaran dan mentoring project akhir mahasiswa.",
    images: [
      "https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp",
      "https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp",
      "https://img.daisyui.com/images/stock/photo-1494253109108-2e30c049369b.webp"
    ]
  },
  8: {
    title: "Publikasi, Dekorasi, dan Dokumentasi (PDD)",
    company: "HIMATIF - IT's Day",
    period: "Oktober 2024",
    description: "Mengajar dasar-dasar pemrograman Python dan Java kepada mahasiswa tingkat awal. Membuat materi pembelajaran dan mentoring project akhir mahasiswa.",
    images: [
      "https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp",
      "https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp",
      "https://img.daisyui.com/images/stock/photo-1494253109108-2e30c049369b.webp"
    ]
  },
  9: {
    title: "Publikasi, Dekorasi, dan Dokumentasi (PDD)",
    company: "HIMATIF - Educare Himatif Berbagi",
    period: "Oktober 2024",
    description: "Mengajar dasar-dasar pemrograman Python dan Java kepada mahasiswa tingkat awal. Membuat materi pembelajaran dan mentoring project akhir mahasiswa.",
    images: [
      "https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp",
      "https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp",
      "https://img.daisyui.com/images/stock/photo-1494253109108-2e30c049369b.webp"
    ]
  }
};

// Detail Page Component
const DetailPage = ({ type, id, onBack }) => {
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  
  const data = type === 'project' ? projectData[id] : experienceData[id];
  
  if (!data) return null;

  const nextImage = () => {
    setCurrentImageIndex(prev => (prev + 1) % data.images.length);
  };

  const prevImage = () => {
    setCurrentImageIndex(prev => (prev - 1 + data.images.length) % data.images.length);
  };

  // Function to render text with line breaks and bold formatting
  const renderTextWithLineBreaks = (text) => {
    if (!text) return null;
    
    return text.split('\n').map((line, lineIndex, array) => (
      <span key={lineIndex}>
        {renderBoldText(line)}
        {lineIndex < array.length - 1 && <br />}
      </span>
    ));
  };

  // Function to render bold text using **text** or __text__ format
  const renderBoldText = (text) => {
    if (!text) return text;
    
    // First handle ** patterns
    let result = text.split(/(\*\*[^*]+\*\*)/g).map((part, index) => {
      if (part.startsWith('**') && part.endsWith('**') && part.length > 4) {
        return <strong key={`bold-${index}`}>{part.slice(2, -2)}</strong>;
      }
      return part;
    });

    // Then handle __ patterns for parts that aren't already JSX elements
    return result.map((part, index) => {
      if (typeof part === 'string') {
        return part.split(/(__[^_]+__)/g).map((subPart, subIndex) => {
          if (subPart.startsWith('__') && subPart.endsWith('__') && subPart.length > 4) {
            return <strong key={`bold-${index}-${subIndex}`}>{subPart.slice(2, -2)}</strong>;
          }
          return subPart;
        });
      }
      return part;
    }).flat();
  };

  return (
    <motion.div
  className="pt-[80px] px-4 md:px-8 lg:px-16" // Background dihapus
  initial={{ opacity: 0 }}
  animate={{ opacity: 1 }}
  exit={{ opacity: 0 }}
  transition={{ duration: 0.5 }}
>
      <div className="max-w-7xl mx-auto">
        {/* Back Button */}
        <motion.button
          onClick={onBack}
          className="mb-6 flex items-center space-x-2 text-white hover:text-[#916BBF] transition-colors duration-300"
          initial={{ x: -20, opacity: 0 }}
          animate={{ x: 0, opacity: 1 }}
          transition={{ duration: 0.3 }}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
          </svg>
          <span className="font-semibold">Kembali</span>
        </motion.button>

        {/* Content Container */}
        <motion.div
          initial={{ y: 30, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          {/* Header */}
          <div className="p-6">
            <motion.h1
              className="text-2xl md:text-3xl font-bold text-white mb-2"
              initial={{ y: 20, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              transition={{ duration: 0.5, delay: 0.3 }}
            >
              {data.title}
            </motion.h1>
            {type === 'experience' && (
              <motion.div
                className="text-[#916BBF] font-semibold"
                initial={{ y: 20, opacity: 0 }}
                animate={{ y: 0, opacity: 1 }}
                transition={{ duration: 0.5, delay: 0.4 }}
              >
                <p className="text-lg">{data.company}</p>
                <p className="text-gray-300 text-sm">{data.period}</p>
              </motion.div>
            )}
          </div>

          {/* Main Content */}
          <div className="flex flex-col">
            {/* Image Section */}
            <motion.div
              className="w-full relative mb-2"
              initial={{ x: -30, opacity: 0 }}
              animate={{ x: 0, opacity: 1 }}
              transition={{ duration: 0.5, delay: 0.5 }}
            >
              <div className="relative h-48 md:h-64 lg:h-80 max-w-2xl mx-auto">
                <AnimatePresence mode="wait">
                  <motion.img
                    key={currentImageIndex}
                    src={data.images[currentImageIndex]}
                    alt={`${data.title} - Image ${currentImageIndex + 1}`}
                    className="w-full h-full object-contain"
                    initial={{ opacity: 0, scale: 0.95 }}
                    animate={{ opacity: 1, scale: 1 }}
                    exit={{ opacity: 0, scale: 1.05 }}
                    transition={{ duration: 0.3 }}
                  />
                </AnimatePresence>

                {/* Navigation Arrows */}
                {data.images.length > 1 && (
                  <>
                    <button
                      onClick={prevImage}
                      className="absolute left-4 top-1/2 transform -translate-y-1/2 bg-[#916BBF] bg-opacity-70 text-white p-1 rounded-full hover:bg-opacity-90 transition-all z-10"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                      </svg>
                    </button>
                    <button
                      onClick={nextImage}
                      className="absolute right-4 top-1/2 transform -translate-y-1/2 bg-[#916BBF] bg-opacity-70 text-white p-1 rounded-full hover:bg-opacity-90 transition-all z-10"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                      </svg>
                    </button>

                    {/* Image Counter */}
                    <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-opacity-80 bg-[#916BBF] text-white px-3 py-1 rounded-full text-xs font-semibold">
                      {currentImageIndex + 1} / {data.images.length}
                    </div>
                  </>
                )}
              </div>

              {/* Dot Indicators */}
              {data.images.length > 1 && (
                <div className="flex justify-center py-3 space-x-2 ">
                  {data.images.map((_, index) => (
                    <button
                      key={index}
                      onClick={() => setCurrentImageIndex(index)}
                      className={`w-2 h-2 rounded-full transition-all duration-300 ${
                        index === currentImageIndex 
                          ? 'bg-[#916BBF] scale-125' 
                          : 'bg-white bg-opacity-40 hover:bg-opacity-60'
                      }`}
                    />
                  ))}
                </div>
              )}
            </motion.div>

            {/* Text Content */}
            <motion.div
              className="w-full p-6 lg:p-4"
              initial={{ x: 30, opacity: 0 }}
              animate={{ x: 0, opacity: 1 }}
              transition={{ duration: 0.5, delay: 0.6 }}
            >
              <h2 className="text-xl font-semibold text-white mb-4 border-b border-[#916BBF] border-opacity-30">
                Deskripsi
              </h2>
              <div className="text-gray-200 leading-relaxed text-justify">
                {renderTextWithLineBreaks(data.description)}
              </div>
            </motion.div>
          </div>
        </motion.div>
      </div>
    </motion.div>
    
  );
};

const Projects = () => {
  const [activeTab, setActiveTab] = useState("projects");
  const [currentPage, setCurrentPage] = useState("main"); // "main", "detail"
  const [selectedItem, setSelectedItem] = useState({ type: null, id: null });
  const [carouselIndexes, setCarouselIndexes] = useState({
    1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0, 11: 0
  });
  const [experienceCarouselIndexes, setExperienceCarouselIndexes] = useState({
    1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0
  });
  const [isVisible, setIsVisible] = useState(false);
  const [animationKey, setAnimationKey] = useState(0);
  const containerRef = useRef(null);

  useEffect(() => {
    const interval = setInterval(() => {
      setCarouselIndexes((prev) => {
        const updated = { ...prev };
        for (let id in updated) {
          const images = projectData[id]?.images || [];
          updated[id] = (updated[id] + 1) % images.length;
        }
        return updated;
      });

      setExperienceCarouselIndexes((prev) => {
        const updated = { ...prev };
        for (let id in updated) {
          const images = experienceData[id]?.images || [];
          updated[id] = (updated[id] + 1) % images.length;
        }
        return updated;
      });
    }, 3000);
    return () => clearInterval(interval);
  }, []);

  // Intersection Observer untuk deteksi visibility
  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true);
          setAnimationKey(prev => prev + 1);
        }
      },
      { threshold: 0.3 }
    );

    if (containerRef.current) {
      observer.observe(containerRef.current);
    }

    return () => {
      if (containerRef.current) {
        observer.unobserve(containerRef.current);
      }
    };
  }, []);

  // Trigger animation when tab changes
  const handleTabChange = (tabId) => {
    setActiveTab(tabId);
    setAnimationKey(prev => prev + 1);
  };

  // Navigate to detail page
  const openDetailPage = (type, id) => {
    setSelectedItem({ type, id });
    setCurrentPage("detail");
  };

  // Navigate back to main page
  const backToMain = () => {
    setCurrentPage("main");
    setSelectedItem({ type: null, id: null });
  };

  // Function to render text with line breaks and bold formatting
  const renderTextWithLineBreaks = (text) => {
    if (!text) return null;
    
    return text.split('\n').map((line, lineIndex, array) => (
      <span key={lineIndex}>
        {renderBoldText(line)}
        {lineIndex < array.length - 1 && <br />}
      </span>
    ));
  };

  // Function to render bold text using **text** or __text__ format
  const renderBoldText = (text) => {
    if (!text) return text;
    
    let result = text.split(/(\*\*[^*]+\*\*)/g).map((part, index) => {
      if (part.startsWith('**') && part.endsWith('**') && part.length > 4) {
        return <strong key={`bold-${index}`}>{part.slice(2, -2)}</strong>;
      }
      return part;
    });

    return result.map((part, index) => {
      if (typeof part === 'string') {
        return part.split(/(__[^_]+__)/g).map((subPart, subIndex) => {
          if (subPart.startsWith('__') && subPart.endsWith('__') && subPart.length > 4) {
            return <strong key={`bold-${index}-${subIndex}`}>{subPart.slice(2, -2)}</strong>;
          }
          return subPart;
        });
      }
      return part;
    }).flat();
  };

  // Main content rendering
  const renderContent = () => {
    if (activeTab === "projects") return (
      <div className="text-white text-lg">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 justify-items-center">
          {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map((id, index) => (
            <motion.div 
              key={`${id}-${animationKey}`} 
              className="card bg-base-100 w-64 shadow-sm cursor-pointer"
              initial={{ opacity: 0, y: 50, scale: 0.8 }}
              animate={isVisible ? { opacity: 1, y: 0, scale: 1 } : { opacity: 0, y: 50, scale: 0.8 }}
              whileHover={{ 
                scale: 1.08, 
                y: -8,
                transition: { duration: 0.3, ease: "easeOut" }
              }}
              whileTap={{ scale: 0.95 }}
              transition={{ 
                duration: 0.5, 
                delay: index * 0.1,
                ease: "easeOut"
              }}
            >
              <figure>
                <motion.img
                  src={projectData[id].images[carouselIndexes[id]]}
                  alt={`Project ${id}`}
                  className="w-full h-32 object-cover"
                  whileHover={{ scale: 1.1 }}
                  transition={{ duration: 0.3 }}
                />
              </figure>
              <div className="card-body bg-[#2E073F] text-sm p-4">
                <h2 className="card-title text-base line-clamp-2">
                  {projectData[id].title}
                </h2>
                <p className="line-clamp-3 text-ellipsis overflow-hidden break-words">{projectData[id].shortDescription}</p>
                <div className="card-actions font-semibold justify-end">
                  <motion.button 
                    className="bg-sm rounded-full px-2 bg-[#542269]"
                    onClick={() => openDetailPage('project', id)}
                    whileHover={{ 
                      scale: 1.1,
                      boxShadow: "0 0 20px rgba(145, 107, 191, 0.5)"
                    }}
                    whileTap={{ scale: 0.95 }}
                    transition={{ duration: 0.2 }}
                  >
                    Details
                  </motion.button>
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    );

    // Skills
    if (activeTab === "skills") return (
      <div className="text-white text-lg">
        <div className="flex flex-col items-center justify-center h-full space-y-8">
          
          {/* Hard Skills Section */}
          <motion.div 
            key={`hard-skills-${animationKey}`}
            className="w-full"
            initial={{ opacity: 0, y: 30 }}
            animate={isVisible ? { opacity: 1, y: 0 } : { opacity: 0, y: 30 }}
            transition={{ duration: 0.6, ease: "easeOut" }}
          >
            <motion.h2 
              className="text-2xl font-bold mb-6 text-center"
              initial={{ opacity: 0, scale: 0.8 }}
              animate={isVisible ? { opacity: 1, scale: 1 } : { opacity: 0, scale: 0.8 }}
              transition={{ duration: 0.5, delay: 0.2 }}
            >
              Hard Skills
            </motion.h2>
            
            <motion.div 
              className="flex flex-wrap justify-center gap-3 mb-4"
              initial={{ opacity: 0 }}
              animate={isVisible ? { opacity: 1 } : { opacity: 0 }}
              transition={{ duration: 0.6, delay: 0.3 }}
            >
              {[
                { src: "./assets/icons/HTML.svg", alt: "HTML" },
                { src: "./assets/icons/CSS.svg", alt: "CSS" },
                { src: "./assets/icons/JavaScript.svg", alt: "JavaScript" },
                { src: "./assets/icons/Java-Dark.svg", alt: "Java" },
                { src: "./assets/icons/Python.svg", alt: "Python" },
                { src: "./assets/icons/CPP.svg", alt: "C++" },
                { src: "./assets/icons/ReactJS.svg", alt: "React JS" },
                { src: "./assets/icons/TailwindCSS.svg", alt: "Tailwind" },
                { src: "./assets/icons/MySQL.svg", alt: "MySQL" },
                { src: "./assets/icons/Wordpress.svg", alt: "WordPress" },
                { src: "./assets/icons/Figma.svg", alt: "Figma" },
                { src: "./assets/icons/VSCode.svg", alt: "VS Code" },
                { src: "./assets/icons/Github.svg", alt: "GitHub" },
                { src: "./assets/icons/Office.svg", alt: "MS Office" },
                { src: "./assets/icons/Canva.svg", alt: "Canva" }
              ].map((icon, index) => (
                <motion.img 
                  key={`${icon.alt}-${animationKey}`}
                  src={icon.src} 
                  alt={icon.alt} 
                  className="w-12 h-12 cursor-pointer"
                  initial={{ opacity: 0, scale: 0, rotate: -180 }}
                  animate={isVisible ? { opacity: 1, scale: 1, rotate: 0 } : { opacity: 0, scale: 0, rotate: -180 }}
                  whileHover={{ 
                    scale: 1.3,
                    rotate: 360,
                    filter: "drop-shadow(0 0 15px rgba(145, 107, 191, 0.5))"
                  }}
                  whileTap={{ scale: 0.9 }}
                  transition={{ 
                    duration: 0.5, 
                    delay: 0.4 + (index * 0.05),
                    ease: "easeOut"
                  }}
                />
              ))}
            </motion.div>
            
            <motion.div 
              className="flex flex-wrap justify-center gap-2 text-sm"
              initial={{ opacity: 0, y: 20 }}
              animate={isVisible ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}
              transition={{ duration: 0.6, delay: 0.8 }}
            >
              {[
                "HTML", "CSS", "JavaScript", "Java", "Python", "C++", "React JS", 
                "Tailwind CSS", "MySQL", "WordPress", "Figma", "VS Code", "GitHub", "MS Office", "Canva"
              ].map((skill, index) => (
                <motion.span 
                  key={`${skill}-${animationKey}`}
                  className="bg-[#916BBF] px-3 py-1 rounded-full transition-all duration-300 ease-in-out transform hover:scale-110 hover:shadow-lg hover:-translate-y-1"
                  initial={{ opacity: 0, x: -20 }}
                  animate={isVisible ? { opacity: 1, x: 0 } : { opacity: 0, x: -20 }}
                  transition={{ 
                    duration: 0.4, 
                    delay: 0.9 + (index * 0.05),
                    ease: "easeOut"
                  }}
                >
                  {skill}
                </motion.span>
              ))}
            </motion.div>
          </motion.div>

          {/* Soft Skills Section */}
          <motion.div 
            key={`soft-skills-${animationKey}`}
            className="w-full"
            initial={{ opacity: 0, y: 30 }}
            animate={isVisible ? { opacity: 1, y: 0 } : { opacity: 0, y: 30 }}
            transition={{ duration: 0.6, delay: 1.2, ease: "easeOut" }}
          >
            <motion.h2 
              className="text-2xl font-bold mb-6 text-center"
              initial={{ opacity: 0, scale: 0.8 }}
              animate={isVisible ? { opacity: 1, scale: 1 } : { opacity: 0, scale: 0.8 }}
              transition={{ duration: 0.5, delay: 1.3 }}
            >
              Soft Skills
            </motion.h2>
            <motion.div 
              className="flex flex-wrap justify-center gap-2 text-sm"
              initial={{ opacity: 0, y: 20 }}
              animate={isVisible ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}
              transition={{ duration: 0.6, delay: 1.4 }}
            >
              {[
                "Problem Solving", "Team Work", "Communication", "Critical Thinking",
                "Time Management", "Adaptability", "Leadership", "Creative Thinking"
              ].map((skill, index) => (
                <motion.span 
                  key={`${skill}-${animationKey}`}
                  className="bg-[#916BBF] px-3 py-1 rounded-full transition-all duration-300 ease-in-out transform hover:scale-110 hover:shadow-lg hover:-translate-y-1"
                  initial={{ opacity: 0, x: 20 }}
                  animate={isVisible ? { opacity: 1, x: 0 } : { opacity: 0, x: 20 }}
                  transition={{ 
                    duration: 0.4, 
                    delay: 1.5 + (index * 0.05),
                    ease: "easeOut"
                  }}
                >
                  {skill}
                </motion.span>
              ))}
            </motion.div>
          </motion.div>
        </div>
      </div>
    );

    // Experience
    if (activeTab === "experience") return (
      <div className="text-white text-lg">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 justify-items-center">
          {[1, 2, 3, 4, 5, 6, 7, 8, 9].map((id, index) => (
            <motion.div 
              key={`exp-${id}-${animationKey}`} 
              className="card bg-base-100 w-64 shadow-sm cursor-pointer"
              initial={{ opacity: 0, y: 50, scale: 0.8 }}
              animate={isVisible ? { opacity: 1, y: 0, scale: 1 } : { opacity: 0, y: 50, scale: 0.8 }}
              whileHover={{ 
                scale: 1.08, 
                y: -8,
                transition: { duration: 0.3, ease: "easeOut" }
              }}
              whileTap={{ scale: 0.95 }}
              transition={{ 
                duration: 0.5, 
                delay: index * 0.1,
                ease: "easeOut"
              }}
            >
              <figure>
                <motion.img
                  src={experienceData[id].images[experienceCarouselIndexes[id]]}
                  alt={`Experience ${id}`}
                  className="w-full h-32 object-cover"
                  whileHover={{ scale: 1.1 }}
                  transition={{ duration: 0.3 }}
                />
              </figure>
              <div className="card-body bg-[#2E073F] text-sm p-4">
                <h2 className="card-title text-base line-clamp-2">
                  {experienceData[id].title}
                </h2>
                <p className="text-xs text-[#916BBF] font-semibold">{experienceData[id].company}</p>
                <p className="text-xs text-gray-300">{experienceData[id].period}</p>
                <div className="card-actions font-semibold justify-end">
                  <motion.button 
                    className="bg-sm rounded-full px-2 bg-[#916BBF]"
                    onClick={() => openDetailPage('experience', id)}
                    whileHover={{ 
                      scale: 1.1,
                      boxShadow: "0 0 20px rgba(145, 107, 191, 0.5)"
                    }}
                    whileTap={{ scale: 0.95 }}
                    transition={{ duration: 0.2 }}
                  >
                    Details
                  </motion.button>
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    );

    // Certificate
    if (activeTab === "certificate") return (
      <div className="text-white text-lg space-y-6">
        <motion.h2
          key={`certificate-title-${animationKey}`}
          className="text-2xl font-bold text-center"
          initial={{ opacity: 0, scale: 0.8 }}
          animate={isVisible ? { opacity: 1, scale: 1 } : { opacity: 0, scale: 0.8 }}
          transition={{ duration: 0.5 }}
        >
        </motion.h2>

        <div className="carousel rounded-box w-64">
          <div className="carousel-item w-full">
            <img
              src="https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp"
              className="w-full"
              alt="Tailwind CSS Carousel component" />
          </div>
          <div className="carousel-item w-full">
            <img
              src="https://img.daisyui.com/images/stock/photo-1565098772267-60af42b81ef2.webp"
              className="w-full"
              alt="Tailwind CSS Carousel component" />
          </div>
          <div className="carousel-item w-full">
            <img
              src="https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp"
              className="w-full"
              alt="Tailwind CSS Carousel component" />
          </div>
          <div className="carousel-item w-full">
            <img
              src="https://img.daisyui.com/images/stock/photo-1494253109108-2e30c049369b.webp"
              className="w-full"
              alt="Tailwind CSS Carousel component" />
          </div>
          <div className="carousel-item w-full">
            <img
              src="https://img.daisyui.com/images/stock/photo-1550258987-190a2d41a8ba.webp"
              className="w-full"
              alt="Tailwind CSS Carousel component" />
          </div>
          <div className="carousel-item w-full">
            <img
              src="https://img.daisyui.com/images/stock/photo-1559181567-c3190ca9959b.webp"
              className="w-full"
              alt="Tailwind CSS Carousel component" />
          </div>
          <div className="carousel-item w-full">
            <img
              src="https://img.daisyui.com/images/stock/photo-1601004890684-d8cbf643f5f2.webp"
              className="w-full"
              alt="Tailwind CSS Carousel component" />
          </div>
        </div>
      </div>
    );

    return null;
  };

  // Render detail page or main page
  if (currentPage === "detail") {
    return (
      <DetailPage 
        type={selectedItem.type} 
        id={selectedItem.id} 
        onBack={backToMain} 
      />
    );
  }

  return (
    <div ref={containerRef} className="pt-28 px-6 md:px-12 lg:px-20">
      <div className="h-full flex items-center">
    <div className="w-full overflow-x-auto">
      <div className="max-w-7xl mx-auto">
        {/* Tab Navigation */}
        <div className="flex space-x-1 mb-0 overflow-x-auto">
          {tabs.map((tab) => (
            <button
              key={tab.id}
              onClick={() => handleTabChange(tab.id)}
              className={`px-6 py-3 font-semibold transition-all duration-300 relative ${
                activeTab === tab.id
                  ? "bg-gradient-to-r bg-[#2E073F] text-white z-10 rounded-t-lg"
                  : "text-white hover:text-[#916BBF] hover:bg-white hover:bg-opacity-10 rounded-t-lg"
              }`}
              style={{
                borderTopLeftRadius: '0.5rem',
                borderTopRightRadius: '0.5rem',
                borderBottomLeftRadius: '0',
                borderBottomRightRadius: '0',
              }}
            >
              {tab.title}
            </button>
          ))}
        </div>

        {/* Content Box */}
        <div 
          className="bg-gradient-to-b from-[#2E073F] to-[#916BBF] rounded-lg shadow-2xl p-8 h-[400px] overflow-y-auto"
          style={{
            borderTopLeftRadius: activeTab === "projects" ? '0' : '0rem',
            borderTopRightRadius: '0rem',
            borderBottomLeftRadius: '0.5rem',
            borderBottomRightRadius: '0.5rem',
          }}
        >
          <AnimatePresence mode="wait">
            <motion.div
              key={activeTab}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.3 }}
            >
              {renderContent()}
            </motion.div>
          </AnimatePresence>
        </div>
      </div>
    </div>
    </div>
    </div>
  );
};

export default Projects;